.de Vb
.ft CW
.nf
..
.de Ve
.ft R
.fi
..
.TH illumina2srf 1
.SH NAME
illumina2srf \- create SRF files from Illumina DNA sequence data
.SH SYNOPSIS
.B illumina2srf -o out.srf -b *.qseq.txt
.SH DESCRIPTION
\fBillumina2srf\fR converts the Illumina GA-pipeline run folder output
into an SRF file. It should be run from the
Bustard\fI<version><date>\fR directory (\fIBaseCalls\fR for RTA).
It has a wealth of options, listed below, although many have defaults
and may be ommitted if the run folder follows the standard directory layout.
The arguments, after the options, should be the filenames of the sequence
files, e.g. \fIs_8_*_qseq.txt\fR. All other filenames are derived
from the _qseq.txt filenames.
.PP
The main structure of an SRF file is as a container, much like zip or
tar. The contents however may be split into variable and common
components allowing for better compression. For \fBillumina2srf\fR
that means that we store trace data in ZTR format with common ZTR
chunks (text identifiers such as base-caller name and version, matrix
files and compression specifications) in an SRF \fIData Block
Header\fR and variable components (sequence, quality and traces) in
ZTR chunks held within an SRF \fIData Block\fR. Typically we have
10,000 Data Blocks per Data Block Header.
.PP
The most major decision in producing the SRF file is what data to put
in it. By default the program writes the sequence and phred-style probability
values. In GAPipeline versions 1.3 onwards these are in the
\fI_qseq.txt\fR files held within the main Bustard directory. In
addition to these it is possible to store trace intensity values (either
unprocessed or processed) using the \fB-b\fR and \fB-sig\fR options.
Intensity data can be read either from the \fI{sig2,int,nse}.txt\fR files
written by versions of the pipeline up to 1.3; \fI{sig2,int,nse}.txt.p\fR files
made by the IPAR varients of the pipeline (also produced by version 1.4
onwards); or \fI.cif\fR,\fI.cnf\fR and \fI.dif\fR files made by the RTA
variants.
.PP
Phred-scale confidence values are obtained directly from the \fI.qseq.txt\fR
files. It is also possible to make four log-odds scale confidence values
for each base with certain pipeline options, which get stored in \fI.prb.txt\fR
files.  These can be added using the \fB-logodds\fR option.
.PP
There are a number of smaller ancillary data files that get stored
too. As there is no per-lane or per-run storage mechanism in
these are added for every SRF Data Block Header of which there may be
several per tile. However the overhead in duplicating this data is not
significant given the size of the individual SRF Data Blocks. The
ancillary data files also stored are \fIconfig.xml\fR files (for both Bustard
and Firecrest), matrices (specified using \fB-mf\fR and \fB-mr\fR) and
phasing XML files (\fB-pf\fR and \fB-pr\fR) and \fIBustardSummary.xml\fR.
.PP
This version of illumina2srf can process samples that have been tagged with
sequence barcodes.  The data for these samples should be preprocessed using
the \fBindex_decoder(1)\fR program first to determine which barcode is
present in each sample.  Illumina2srf can then include this information by
adding it to the end of the read names that it generates.
.SS Terminology
.PP
A \fBsample\fR is a DNA specimen corresponding to an individual spot imaged
by the sequencing machine.  Samples exist as small blobs of DNA in a number
of physically separate \fBlanes\fR on a glass slide.  Lanes are divided
into \fBtiles\fR, which are regions that the sequencing machine images
with its camera.
.PP
A \fBcycle\fR is the set of observations used to determine a single base call
for each sample.  A \fBread\fR is a run of cycles that form a continuous
sequence.  There may be more than one read, taken from different regions
of the sample.
.PP
A \fBsequence barcode\fR or \fBindex\fR is a segment of a sample that includes
a short known DNA sequence.  This allows related samples (e.g. from the same
library) to be differentiated without having to run them in physically
separate lanes.
.SH OPTIONS
.TP
\fB-h\fR
Show the help message and exit.
.SS Basic options
.TP
\fB-o\fR file
The name of the output file.  The default is 'traces.srf'.
.TP
\fB-clobber\fR
Overwrite a pre-existing output file.
.TP
\fB-bustard-dir\fR \fIdir\fR
Get run information and traces from the directory '\fIdir\fR'.  If this option
is not present then illumina2srf will use the directory that contains the
sequence (\fIqseq.txt\fR) files.
.TP
\fB-q\fR
Quiet operation.
.TP
\fB-d\fR
Output 'dots'.
.SS Region description
.TP
\fB-use_bases\fR
.RS
Select which bases make up the forward, index and reverse parts of the read.
An example is 'Y54,I6N1,Y54'.
.PP
\'Y<n>' indicates that the next <n> bases are part of a forward (the first 'Y')
or reverse (second 'Y') read.  There should be no more than two 'Y's.
.PP
\'I<n>' means the next <n> bases are a sequence barcode used to tag samples.
There should only be one I.
.PP
\'N<n>' means the next <n> bases are some sort of artifact (e.g. a primer) that
is not part of the forward or reverse reads or a barcode.
.PP
The commas represent the boundaries of the reads made by the sequencer,
as reflected in the .qseq.txt files.  If the number following the letter
is 1 then it can be omitted (so the example above would then be Y54,I6N,Y54).
.PP
This information does not affect which bases are stored, but instead is used
to make the REGN chunk that is stored in the SRF data block headers.
.PP
If this option is not present, then illumina2srf will either not store a REGN
chunk (if there was only one read) or for the case of two reads will assume
that the first was a forward read and the second was a reverse read.  It
will insist that this option is used if there are more than two reads.
.RE
.SS What to include
.TP
\fB-filter\-bad\-reads\fR
Filter out any samples marked as bad by the qseq file. Note that for paired-end
pipeline analyses, samples will only be filtered if both reads of the pair meet
the filtration criteria.
.TP
\fB-b\fR, \fB-r\fR
Add unprocessed signal data (int.txt or int.txt.p or .cif files), and various
other files required to rerun the basecaller. -r is an alias for -b, for
backwards compatibility.
.TP
\fB-sig\fR, \fB-no_sig\fR, \fB-P\fR
Specifies to store (\fB-sig\fR) or not to store (\fB-no_sig\fR or \fB-P\fR)
the processed signal data (.sig2.txt or .dif files).  The default is
\fB-no_sig\fR.
.TP
\fB-nse\fR, \fB-no_nse\fR
Specifies to store (\fB-nse\fR) or not to store (\fB-no_nse\fR) 'noise' data
(_nse.txt or _.nse.txt.p or .cnf files).  This option is ignored unless
\fB-b\fR is used as well.  The default is \fB-no_nse\fR.
.TP
\fB-logodds\fR, \fB-no_logodds\fR, \fB-PRB\fR
Specifies to store (\fB-logodds\fR) or not to store (\fB-no_logodds\fR or
\fB-PRB\fR) data from the \fI.prb\fR files, which give log odds confidence
values for all bases, not just the one that was called.  The default is
\fB-no_logodds\fR.
.TP
\fB-i\fR
Add a read name index to the SRF file to allow random access.  Using this
option can greatly increase the memory requirement of illumina2srf.  A
possibly better alterative is to run srf_index_hash from the Staden io_lib
package on the SRF file after it has been built.
.TP
\fB-s\fR \fIsk\fR
Skips '\fIsk\fR' cycles from the start of read 1 of each sequence.
Do not use this.
.SS Where to look for trace (and other) files.
.PP
Normally it should not be necessary to use these options as illumina2srf will
probe to see which files are present.  See the section FILES below for a
description of what these files are and where illumina2srf looks for them.
.TP
\fB-I\fR, \fB-noI\fR
Force (\fB-noI\fR) or prevent (\fB-I\fR) reading of \fI{sig2,int,nse}.txt\fR
files as used in pipeline versions up to 1.3.
.TP
\fB-rta\fR, \fB-no_rta\fR
Force (\fB-rta\fR) or prevent (\fB-no_rta\fR) reading of RTA (\fI.cif\fR,
\fI.cnf\fR, \fI.dif\fR) files.
.TP
\fB-ipar\fR, \fB-no_ipar\fR
Force (\fB-ipar\fR) or prevent (\fB-no_ipar\fR) reading of IPAR
(\fI{int,nse}.txt.p\fR) files.
.TP
\fB-mf\fR \fIname\fR
Name of the 1st read matrix file.
.TP
\fB-mr\fR \fIname\fR
Name of the last read matrix file.
.TP
\fB-pf\fR \fIname\fR
Name of the 1st read phasing file.
.TP
\fB-pr\fR \fIname\fR
Name of the last read phasing file.
.SH FILES
illumina2srf will attempt to read various files made by the Genome Analyser
analysis software.  The names, formats and locations of these files vary
with the version of the analysis software in use.  illumina2srf currently
understands the output from three versions of the GA software.  These are
pipeline 1.3, IPAR (also used by pipeline 1.4) and RTA.  Usually only
the files for one of these will be present, so illumina2srf can work out
which to use by probing for various files and directories.  This can be
overridden using the -noI, -ipar, -rta, -I, -no_ipar and -no_rta options.
.PP
The data that illumina2srf reads is:
.SS Basecalled sequences and confidence values.
These files normally have a \.qseq\.txt suffix and are listed on the command 
line of illumina2srf.  This data is always included in the output file.  The
basecalls are converted to BASE chunks and the confidence values to CNF1.
.SS Signal data
There are three types of signal data:

.IP 1 2
\'Unprocessed' data extracted from the images collected by the sequencing
machine.  This is included if the -b option is used.  This is stored as
SMP4 chunks of type 'SLXI'.

.IP 2 2
\'Processed' data.  As above, but will have been processed to remove artifacts
such as cross-talk between colour channels and phasing effects.  This is
included using the -sig option.  It is stored as SMP4 chunks of type 'PROC'.

.IP 3 2
\'Noise' data.  This is extracted from the original images and describes the
amount of background variation present in the neighbourhood of the sample.
It is only used for calculating the log-odds values in the .prb files.
This data will only be included if both the -b and -nse options are used. It
is stored as SMP4 chunks of type 'SLXN'.

.PP
illumina2srf looks for unprocessed signal data in the following locations
(relative to bustard_dir):
.TP 14
1.3
\&../s_*_int.txt
.TP 14
IPAR
\&../s_*_int.txt.p
.TP 14
RTA
\&../../Intensities/L*/C*.*/s_*_*.cif
.PP
Noise data is here:
.TP 14
1.3
\&../s_*_nse.txt
.TP 14
IPAR
\&../s_*_nse.txt.p
.TP 14
RTA
\&../../Intensities/L*/C*.*/s_*_*.cnf
.PP
Processed signals are in:
.TP 14
1.3 and IPAR
s_*_sig2.txt
.TP 14
RTA
\&../../Intensities/L*/C*.*/s_*_*.dif
.PP
.SS Log-odds probability data
This is stored in files called s_*_prb.txt.  The analysis software does not
create these automatically any more, but it can be produced by running
\'bustard' with options to produce legacy output files.  This data will only
be stored in the SRF file if illumin2srf is run with the -prb option.  It
is stored as CNF4 chunks.
.SS Phasing and Matrix files
These store some of the parameters that are used by the basecalling software
to convert the unprocessed signals into the processed ones.  The locations
and formats of these files have varied with the analysis software.
Illumina2srf will search for the following files relative to bustard_dir.
.TP
Forward matrix
.nf
Matrix/s_%l_1_matrix.txt
Matrix/s_%l_02_matrix.txt
\&../Matrix/s_%l_02_matrix.txt
.fi
.TP
Reverse matrix
.nf
Matrix/s_%l_%r_matrix.txt
Matrix/s_%l_%02c_matrix.txt
\&../Matrix/s_%l_%02c_matrix.txt
.fi
.TP
Forward phasing
.nf
Phasing/s_%l_1_phasing.xml
Phasing/s_%l_01_phasing.xml
Phasing/s_%l_1_phasing.txt
Phasing/s_%l_01_phasing.txt
.fi
.TP
Reverse phasing
.nf
Phasing/s_%l_%r_phasing.xml
Phasing/s_%l_%02c_phasing.xml
Phasing/s_%l_%r_phasing.txt
Phasing/s_%l_%02c_phasing.txt
.fi
.PP
Where %l, %r and %02c are substituted as described below.
.PP
The locations of these files can be overridden using the -mf, -mr, -pf, and
-pr options.  These take a printf(3) style format string.  This consists of
ordinary characters (not %) which are directly copied to the output string
and conversion specifications which start with a % character, include an
optional flag character ('0') and field width, and end with a conversion
specifier (one of the characters 'c', 'd', 'l' or 'r').
.PP
The only flag character allowed is '0'.  This causes the value to be zero
padded.
.PP
The field width is a decimal digit string.  If the converted value has fewer
characters than the specified width then it will be padded with spaces (or
zeros if the '0' flag has been used) to the given width.
.PP
The converions specifiers are:
.TP
c
For phasing files, this is the number of the first cycle in the read.  For
matrix files, it is the second cycle.
.TP
d
This is allowed for backwards compatibility.  The first 'd' conversion is
the lane number.  The second 'd' is the same value as used for the 'c'
substitution.  So s_%d_%d_matrix.txt is the same as s_%l_%c_matrix.txt.
.TP
l
The lane number.
.TP
r
The read number.
.PP
The phasing and matrix files are stored as TEXT chunks in the SRF file.
.SS Configuration files
Illumina2srf reads and stores the following configuration files (locations are
all relative to bustard_dir).  They also go into the TEXT chunks of the SRF
file.
.PP
.TP
Bustard (basecaller) configuration
config.xml
.TP
Bustard summary
BustardSummary.xml
.TP
Firecrest (image processor) configuration
\&../config.xml
.TP
Flowcell ID (currently not stored, but could be used when making read names)
\&../../../Config/FlowCellId.xml
.SH EXAMPLES
Assuming that the current directory is the one where Bustard (or the RTA
basecaller) stored all of its data, this should create an SRF file complete
with unprocessed trace data for lane 1.
.PP
.Vb
    illumina2srf -o lane1.srf -b s_1_*_qseq.txt
.Ve
.PP
This stores the recalibrated confidence values from Gerald instead.  Note that
it is necessary to specify bustard_dir here.
.PP
.Vb
    illumina2srf -o lane1.srf \\
                 -bustard-dir `pwd` \\
                 -b GERALD/s_1_*_qseq_custom.txt
.Ve
.PP
For an indexed run, the sequence barcodes should be decoded using
index_decoder(1) before running illumina2srf.  In this case, the -use_bases
option should be used to show which bases are part of the index.
.PP
.Vb
    mkdir decoded
    index_decoder -o decoded -t mytags -u Y54,I6,Y54 s_1_*_qseq.txt
    illumina2srf -o lane1.srf \\
                 -bustard-dir `pwd` \\
                 -b -use_bases Y54,I6,Y54 decoded/s_1_*_qseq.txt
.Ve
.SH BUGS
The option processing is a mess.  Some of the options are badly named or
work the wrong way round (e.g. -I and -noI).  Some have been duplicated for
this reason so as to give a cleaner interface. (e.g. -PRB / -no_logodds).
.PP
When reading the IPAR or RTA formats, illumina2srf needs to read all of
the signal data for a tile into memory.  This may lead to excessive memory
consumption if a tile happens to contain a large number of samples.
.PP
The need to support multiple versions if the analysis software has caused the
code to become somewhat untidy.
.SH AUTHORS
James Bonfield (Sanger Institute, original author).
.PP
Come Raczy, Chris Saunders and others at Illumina.
.PP
Rob Davies (Sanger Institute).
.SH HISTORY
This program was part of the Staden io_lib package (http://staden.sf.net) and
was originally called solexa2srf.
.PP
It was passed over to Illumina, who added support for the 1.3 and IPAR
analysis software.  They also renamed it to illumina2srf (Illumina having
taken ownership of Solexa).
.PP
It was later released as a stand-alone project.  This added the ability to
handle indexed samples and the RTA software.  It also removed support for
versions of the analysis software prior to 1.3 in order to considerably
simplify the code base.
.SH LEGAL
Illumina is a registered trade mark of Illumina, inc. 9885 Towne Centre Drive,
San Diego, CA 92121 USA.
.SH COPYRIGHT
Copyright \(co 2006-2009, Genome Research Ltd (GRL).
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

.IP \(bu 4
Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
.IP \(bu 4
Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials
provided with the distribution.
.IP \(bu 4
Neither the name of the Genome Research Limited nor the
names of its contributors may be used to endorse or promote
products derived from this software without specific prior
written permission.
.PP
THIS SOFTWARE IS PROVIDED BY GRL "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL GRL BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.

.PP
Parts of the code have been edited by Illumina.  These edits have been made
available under the following license:

Copyright \(co 2006-2009, Illumina Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

.IP \(bu 4
Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
.IP \(bu 4
Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials
provided with the distribution.
.IP \(bu 4
Neither the name of the Illumina Inc. nor the
names of its contributors may be used to endorse or promote
products derived from this software without specific prior
written permission.
.PP
THIS SOFTWARE IS PROVIDED BY ILLUMINA "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL ILLUMINA BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
