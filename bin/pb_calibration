#!/bin/bash

#########################################################################
#
# run pb_calibration pipeline
#
# for usage run
#
#   pb_callibration -h
#
#########################################################################

initialise ()
{

    # set defaults
    bam=""
    snp=""
    intensity_dir=""
    filter=""
    cstart=""
    cstart1=""
    cstart2=""
    t_filter=""
    nL="3"
    nR="6"
    prefix=""

    TEMP=`getopt -a -o h --long bam:,snp:,filter:,intensity_dir:,cstart:,cstart1:,cstart2:,t_filter:,nL:,nR:,prefix:,help -n $0 -- "$@"`

    if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            --bam) bam=$2; echo "bam $bam" >&2; shift 2 ;;
            --snp) snp=$2; echo "snp file $snp" >&2; shift 2 ;;
            --filter) filter=$2; echo "filter $filter" >&2; shift 2 ;;
            --intensity_dir) intensity_dir=$2; echo "intensity_dir $intensity_dir" >&2; shift 2 ;;
            --prefix) prefix=$2; echo "prefix $prefix" >&2; shift 2 ;;
            --cstart) cstart=$2; echo "cstart $cstart" >&2; shift 2 ;;
            --cstart1) cstart1=$2; echo "cstart1 $cstart1" >&2; shift 2 ;;
            --cstart2) cstart2=$2; echo "cstart2 $cstart2" >&2; shift 2 ;;
            --t_filter) t_filter=$2; echo "will filter tiles with q < mean - $t_filter*stdev" >&2; shift 2 ;;
            --nL) nL=$2; echo "$nL bins between 0.25 and optimal cut" >&2; shift 2 ;;
            --nR) nR=$2; echo "$nR bins between optimal cut and qmax" >&2; shift 2 ;;
            -h|--help) echo "Usage: $0 [options]";
                       echo "                   ";
                       echo "       -bam <bam file>";
                       echo "                   ";
                       echo "       -intensity_dir <intensity directory>";
                       echo "                   ";
                       echo "       -snp <snp file>";
                       echo "                   ";
                       echo "       -filter <filter file>";
                       echo "                   ";
                       echo "            or     ";
                       echo "                   ";
                       echo "       -t_filter <count>   filter tiles with q < mean - count * stdev";
                       echo "                             default do not filter tiles";
                       echo "                   ";
                       echo "       -cstart <cstart>    cycle number of first base";
                       echo "                   ";
                       echo "            or     ";
                       echo "                   ";
                       echo "       -cstart1 <cstart1>  cycle number of first base of read1";
                       echo "       -cstart2 <cstart2>  cycle number of first base of read2";
                       echo "                   ";
                       echo "       -nL <count>         number of bins in calibration table";
                       echo "                             between optimal cut and 0.25";
                       echo "                             default 3";
                       echo "       -nR <count>         number of bins in calibration table";
                       echo "                             between optimal cut and qmax";
                       echo "                             default 6";
                       echo "       -prefix <prefix>    output file prefix";
                       echo "                             no default";
                       echo "                   ";
                       echo "       -h|--help   ";
                       echo "                   ";
                       exit 0 ;;
            --) shift ; break ;;
            *) echo "Unrecognised option $1" >&2; exit 1 ;;
        esac
    done

    if [ -z $bam ] ; then
        echo "You must supply a bam file" >&2
        exit 1
    fi

    if [ -z $cstart ] && ( [ -z $cstart1 ] || [ -z $cstart2 ] ) ; then
        echo "You must supply cstart OR cstart1 and cstart2" >&2
        exit 1
    fi

    if [ $cstart ] && ( [ $cstart1 ] || [ $cstart2 ] ) ; then
        echo "You must specify cstart OR cstart1 and cstart2 not both" >&2
        exit 1
    fi

    if [ $filter ] && [ $t_filter ] ; then
        echo "You can supply a filter file OR specify a tile filter not both" >&2
        exit 1
    fi

    if [ -z $prefix ] ; then
        echo "You must supply a prefix" >&2
        exit 1
    fi
}

set -o errexit
set -o nounset

tools=`dirname $0`
tools=`readlink -f $tools`

initialise "$@"

if [ ! -s $bam ] ; then
    echo "bam file $bam does not exist" >&2
    exit 1
fi

if [ $intensity_dir ] ; then
    if [ ! -d $intensity_dir ] ; then
        echo "Intensity directory $intensity_dir does not exist" >&2
        exit 1
    fi
    echo "intensity directory $intensity_dir" >&2
else
    echo "No intensity directory" >&2
fi    

echo "Output file prefix ${prefix}" >&2

echo "Checking bam file" >&2

stat_file=${bam/%.bam/_flagstat.txt}
if [ ! -s $stat_file ] ; then
  stat_file=${prefix}_flagstat.txt
  samtools flagstat $bam > $stat_file
  if [ ! -s $stat_file ] ; then
      echo "failed to create flagstat file" >&2
      exit 1
  fi
fi

pair=`awk '/[0-9]+ paired in sequencing/ {print $1+$3}' $stat_file`
if [ $pair -gt 0 ] ; then
    count=`awk '/[0-9]+ properly paired/ {print $1}' $stat_file`
    if [ $count -lt 200000 ] ; then
        echo "Only $count properly paired reads < 200000" >&2
        exit 0
    fi
else
    count=`awk '/[0-9]+ mapped/ {print $1}' $stat_file`
    if [ $count -lt 100000 ] ; then
        echo "Only $count reads align < 100000" >&2
        exit 0
    fi
fi

echo "Making calibration table..." >&2

parms="-nL $nL -nR $nR -p $prefix"

if [ $intensity_dir ] ; then
  parms="$parms -intensity-dir $intensity_dir"
fi

if [ $snp ] ; then
    parms="$parms -snp_file $snp"
fi

if [ $filter ] ; then
    parms="$parms -filter_file $filter"
fi

if [ $t_filter ] ; then
    parms="$parms -filter-bad-tiles $t_filter"
fi

if [ $cstart ] ; then
    parms="$parms -cstart $cstart"
else
    parms="$parms -cstart1 $cstart1 -cstart2 $cstart2"
fi

$tools/calibration_pu $parms $bam

if [ $intensity_dir ] ; then
  ct=${prefix}_purity_cycle_caltable.txt
else
  ct=${prefix}_quality_cycle_caltable.txt
fi  

echo "Checking calibration table $ct" >&2

$tools/check_caltable.pl -verbose -norename $ct
