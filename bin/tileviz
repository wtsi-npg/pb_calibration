#!/software/bin/perl

#########
# Author:        Marina Gourtovaia
# Maintainer:    $Author: mg8 $
# Created:       12 June 2012
# Last Modified: $Date: 2012-07-03 15:10:37 +0100 (Tue, 03 Jul 2012) $
# Id:            $Id: tileviz 15816 2012-07-03 14:10:37Z mg8 $
# $HeadURL: svn+ssh://svn.internal.sanger.ac.uk/repos/svn/new-pipeline-dev/npg-qc/branches/prerelease-51.0/bin/tileviz $
#

package npg_qc::tileviz;

use strict;
use warnings;
use English qw(-no_match_vars);
use Carp;
use Readonly;
use Moose;
use Cwd;
use GD::Image;
use List::Util qw/max min/;
use List::MoreUtils qw/uniq/;

with  qw /  MooseX::Getopt /;

Readonly::Scalar my $READ_NAME_INDEX      => 0;
Readonly::Scalar my $BAM_FLAG_INDEX       => 1;
Readonly::Scalar my $READ_INDEX           => 2;
Readonly::Scalar my $QUALITIES_INDEX      => 3;
Readonly::Scalar my $MMATCH_BITMAP_INDEX  => 4;
Readonly::Scalar my $OQUALITIES_INDEX     => 5;

Readonly::Scalar my $FORWARD_READ     => 0x0040;
Readonly::Scalar my $REVERSE_READ     => 0x0080;

Readonly::Scalar my $COORD_SHIFT      => 1000;
Readonly::Scalar my $COORD_FACTOR     => 10;

Readonly::Scalar my $REDUCTION_FACTOR => 200;
Readonly::Scalar my $TILE_X_MAX       => 2_100;
Readonly::Scalar my $TILE_Y_MAX       => 20_000;
Readonly::Scalar my $NUM_COLUMNS      => 3;
Readonly::Scalar my $NUM_ROWS         => 8;

Readonly::Scalar my $IMAGE_GAP        => 3;
Readonly::Scalar my $LABEL_HEIGHT     => 25;

Readonly::Hash   my %MMATCH_BITMAP_KEYS  => { 'mmatch' => 2, 'insert' => 4, 'del' => 8, };
Readonly::Hash   my %KNOWN_TYPES         => { 'qual' => 1, 'mmatch' => 1, 'insert' => 1, 'del' => 1, };
Readonly::Scalar my $CHAR_SHIFT          => 33;

Readonly::Hash   my %TILES_INFO        => { '12' => { 'num_columns' => 1, 'num_rows' => 12, },
                                            '14' => { 'num_columns' => 1, 'num_rows' => 14, },
                                            '28' => { 'num_columns' => 1, 'num_rows' => 14, },
                                            '64' => { 'num_columns' => 2, 'num_rows' => 16, },
                                            '48' => { 'num_columns' => 3, 'num_rows' =>  8, },
                                            '96' => { 'num_columns' => 3, 'num_rows' => 16, },
                                          };

Readonly::Scalar my $NUM_IMAGES_IN_REPORT_ROW => 18;

## no critic (RegularExpressions::RequireLineBoundaryMatching RegularExpressions::RequireExtendedFormatting RegularExpressions::RequireDotMatchAnything ProhibitParensWithBuiltins RequireCheckedSyscalls ProhibitAmbiguousNames)

################# Public attributes #####################

has 'type' =>     (  isa      => 'ArrayRef',
                     is       => 'ro',
                     required => 0,
                     default  => sub{ return ['qual', 'mmatch', 'insert', 'del']; },
                     writer   => '_set_type',
                     documentation => 'array ref of types of image (insert, del, qual, mmatch); default - insert, qual, mmatch; oqual is added automatically if available',
                  );

has 'dir_out'  =>  (  isa      => 'Str',
                      is       => 'ro',
                      required => 0,
                      default  => sub { return getcwd; },
                      documentation => 'output directory, default - current directory',
                   );

has 'cycles'   =>  (  isa      => 'ArrayRef',
                      is       => 'ro',
                      required => 0,
                      default => sub { return []; },
                      documentation => 'array of cycle numbers; if not set, all cycles will be considered',
                   );

has 'bam_in'   =>  (  isa      => 'Str',
                      is       => 'ro',
                      required => 1,
                      documentation => 'full path to a bam file, including its name; required',
                   );

has 'snp_file'   =>  (  isa      => 'Str',
                         is       => 'ro',
                         required => 0,
                         default => q[],
                         documentation => 'full path to a file of known SNPs, including its name; optional argument, no default',
                      );

has 'jump_by'     => (  isa      => 'Int',
                        is       => 'ro',
                        required => 0,
                        default  => 1,
                        documentation => 'jump size if any records have to be skipped, 1 by default, ie no skipping',
                     );

has 'reduction'   => (  isa      => 'Int',
                        is       => 'ro',
                        required => 0,
                        default  => $REDUCTION_FACTOR,
                        documentation => 'linear scaling down of both x and y coordinates, default - 200, meaning in practice 2000',
                     );

has 'mismatch_tool_path'   =>  (  isa      => 'Str',
                                  is       => 'ro',
                                  required => 0,
                                  documentation => 'path to a tool that interprets bam file, optional argument',
                                  default => q[spatial_filter],
                               );

has 'min_qual' =>   (  isa      => 'Int',
                       is       => 'ro',
                       required => 0,
                       default  => 0,
                       documentation => 'minimum quality to consider for indels and mismatches, zero by default',
                    );

has 'use_oq'   =>   (  isa      => 'Bool',
                       is       => 'ro',
                       required => 0,
                       default  => 0,
                       documentation => 'a boolean flag indicating whether to use original qualities when filtering by quality; false by default',
                    );

has 'num_tiles'=>   (  isa      => 'Int',
                       is       => 'rw',
                       required => 0,
                       default => 0,
                       documentation => 'number of tiles to identify the layout of tiles; if not given, it is computed from the data',
                    );


################# Private attributes #####################

has '_command' =>  (  isa      => 'Str',
                      is       => 'ro',
                      required => 0,
                      lazy_build => 1,
                   );
sub _build__command {
  my $self = shift;
  ##no critic (ProhibitParensWithBuiltins)
  my $snps = $self->snp_file ? join(q[ ], q[--snp_file], $self->snp_file) : q[];
  return join(q[ ], $self->mismatch_tool_path, q[-d], $snps, $self->bam_in);
}



has '_num_image_types'=> (  isa       => 'Int',
                            is        => 'rw',
                            required  => 0,
                         );

has '_num_cycles' =>  (  isa      => 'Int',
                         is       => 'rw',
                         required => 0,
                         default  => 0,
                      );

has '_sequence_id' => (  isa      => 'Str',
                         is       => 'rw',
                         required => 0,
                         default  => q[],
                      );

has '_image_dir_name' =>   (  isa      => 'Str',
                              is       => 'ro',
                              required => 0,
                              lazy_build => 1,
                           );
sub _build__image_dir_name {
  my $self = shift;

  my @fname_components = split /\//, $self->bam_in;
  my $fname = pop @fname_components;
  @fname_components = split /\./, $fname;
  $fname = shift @fname_components;
  ##no critic (ProhibitParensWithBuiltins)
  my $name = join(q[_], $self->_sequence_id, sort(@{$self->type}));
  ##use critic
  if ($self->min_qual) {
    $name .= '_';
    if ($self->use_oq) {
      $name .= 'o';
    }
    $name .= 'q' . $self->min_qual;
  }
  $name .= qq[_$fname];
  return $name;
}

has '_image_dir' =>   (  isa      => 'Str',
                         is       => 'ro',
                         required => 0,
                         lazy_build => 1,
                      );
sub _build__image_dir {
  my $self = shift;
  my $dir = join q[/], $self->dir_out, $self->_image_dir_name;
  if (!-d $dir) {
    mkdir $dir or croak "Cannot create directory $dir";
  }
  return $dir;
}

has '_colour_table' =>  (  isa      => 'Maybe[HashRef]',
                           is       => 'rw',
                           required => 0,
                        );

has '_num_rows'    => (  isa      => 'Int',
                         is       => 'ro',
                         required => 0,
                         lazy_build => 1,
                      );
sub _build__num_rows {
  my $self = shift;
  my $num_tiles = $self->num_tiles;
  return exists $TILES_INFO{$num_tiles} ? $TILES_INFO{$num_tiles}{'num_rows'} : $num_tiles;
}

has '_num_columns' => (  isa      => 'Int',
                         is       => 'ro',
                         required => 0,
                         lazy_build => 1,
                      );
sub _build__num_columns {
  my $self = shift;
  my $num_tiles = $self->num_tiles;
  return exists $TILES_INFO{$num_tiles} ? $TILES_INFO{$num_tiles}{'num_columns'} : 1;
}



has '_tile_image_width' =>  ( isa        => 'Int',
                              is         => 'rw',
                              required   =>  0,
                              default => 0,
                            );

has '_image_width' =>  ( isa        => 'Int',
                         is         => 'ro',
                         required   =>  0,
                         lazy_build => 1,
                       );
sub _build__image_width {
  my $self = shift;
  return $self->_tile_image_width * $self->_num_columns * 2 + $IMAGE_GAP;
}

has '_tile_image_height' =>  ( isa        => 'Int',
                               is         => 'rw',
                               required   =>  0,
                               default => 0,
                            );

has '_image_height' => ( isa        => 'Int',
                         is         => 'ro',
                         required   =>  0,
                         lazy_build => 1,
                       );
sub _build__image_height {
  my $self = shift;
  return ($self->_tile_image_height + 1) * $self->_num_rows + $LABEL_HEIGHT;
}

has '_tiles' =>    (  isa      => 'HashRef',
                      is       => 'rw',
                      required => 0,
                      default  => sub { return {};},
                   );

has '_summary_images' => (  isa      => 'ArrayRef',
                            is       => 'rw',
                            required => 0,
                            default  => sub { return [];},
                         );
has '_per_cycle_images' => (  isa      => 'HashRef',
                              is       => 'rw',
                              required => 0,
                              default  => sub { return {};},
                           );

has '_oq' =>      (  isa      => 'Bool',
                     is       => 'rw',
                     required => 0,
                     default  => 0,
                  );

has '_qual_index' =>      (  isa        => 'Maybe[Int]',
                             is         => 'rw',
                             required   => 0,
                             lazy_build => 1,
                          );
sub _build__qual_index {
  my $self = shift;

  my $last = $self->_num_image_types - 1;
  my $oqi = $self->type->[$last] eq 'oqual' ? $last : undef;
  if ($oqi) {
    $last--;
  }
  my $qi = $self->type->[$last] eq 'qual' ? $last : undef;
  my $index = $oqi && (!$qi || $self->use_oq) ? $oqi : $qi;
  print "QUALITY INDEX $index\n";
  return $index;
}

has '_max_nonqual_index' => (  isa        => 'Maybe[Int]',
                               is         => 'rw',
                               required   => 0,
                               lazy_build => 1,
                            );
sub _build__max_nonqual_index {
  my $self = shift;
  ## no critic (ProhibitMagicNumbers)
  my $i = -1;
  foreach my $type (@{$self->type}) {
    if ($type eq q[qual] || $type eq q[oqual]) {
      last;
    }
    $i++;
  }
  return $i < 0 ? undef : $i;
}

sub BUILD {
  my $self = shift;
  foreach my $type (@{$self->type}) {
    if (!exists $KNOWN_TYPES{$type}) {
      croak "Unknown type $type. Existing types: " . join(q[, ], sort keys %KNOWN_TYPES) . q[.];
    }
  }
  my @types = sort @{$self->type};
  $self->_set_type(\@types);
  return;
}

sub run {
  my ($self) = @_;

  my $dir_out = $self->dir_out;
  if (!-d $dir_out) {
    mkdir $dir_out or croak qq[Cannot create directory $dir_out];
  }
  print "OUTPUT DIRECTORY $dir_out\n" or carp 'Cannot print';

  my $command = $self->_command;
  ## no critic (ProhibitParensWithBuiltins)
  print join(q[ ], 'EXECUTING', q["].$command.q["], "\n\n") or carp 'Cannot print';
  ## use critic

  local $SIG{CHLD} = sub {
    ## no critic (ProhibitMagicNumbers)
    my $child_exit_status = $CHILD_ERROR >> 8;
    ## use critic
    if ($child_exit_status != 0) {
      croak qq[Child process "$command" exited with status $child_exit_status $ERRNO];
    }
  };

  ## no critic (ProhibitTwoArgOpen)
  open my $fh, "$command |" or croak qq[Cannot fork "$command". $ERRNO];
  ## use critic
  my $count = $self->_parse($fh);
  close $fh or carp 'Cannot close piped input stream';

  print "$count READS BINNED\n" or carp 'Cannot print';
  if ($count > 0) {
    $self->_draw();
    print "Finished writing images\n" or carp 'Cannot print';
    $self->_report();
    print "Finished writing report\n" or carp 'Cannot print';
  }
  return;
}

sub _parse {
  my ($self, $fh) = @_;

  my $read_name_index = $READ_NAME_INDEX;
  my $read_index = $READ_INDEX;
  my $bam_flag_index = $BAM_FLAG_INDEX;
  my $rr = $REVERSE_READ;
  my $read_name_pattern = qr/:(\d+):(\d+):(\d+)(#\S+)?\z/;
  my $count  = 0;
  my $jcount = 0;

  my $coord_method = $self->reduction == $REDUCTION_FACTOR ? '_coord' : '_coord_old';

  while (<$fh>) {

    $jcount++;
    if ($jcount < $self->jump_by) {
      next;
    } else {
      $jcount = 0;
    }

    my $line = $_;
    chomp $line;
    my @columns = split /\t/, $line;
    my $read_name = $columns[$read_name_index];

    if (!$self->_num_cycles) {
      $self->_num_cycles(length $columns[$read_index]);
      my ($id_run,$position,$tile,$x,$y,$tag) = $read_name  =~ /(\S+):(\d):(\d+):(\d+):(\d+)(#\S+)?\z/;
      if ($id_run =~/\A\S+_0*(\d+)\z/smx) {
        $id_run = $1;
      }
      $self->_sequence_id(join q[-], $id_run, $position);
      print 'THE ADDITIONAL FIELD WITH ORIGINAL QUALITIES ';
      if (scalar @columns == $OQUALITIES_INDEX + 1) {
        $self->_oq(1);
        push @{$self->type}, q[oqual];
        print "FOUND\n";
      } else {
        print "NOT FOUND\n";
      }
      $self->_num_image_types(scalar @{$self->type});
    }

    my ($tile,$x,$y,$tag) = $read_name  =~ /$read_name_pattern/smx;
    $x = $self->$coord_method($x, $read_name);
    $y = $self->$coord_method($y, $read_name);
    my $flag = $columns[$bam_flag_index];
    my $read = ($flag & $rr) ? 'R' : 'F';

    $self->_bin_read($tile, $x, $y, $read, \@columns);
    $count++;
  }

  my @tile_names = keys %{$self->_tiles};
  if (!$self->num_tiles) {
    $self->num_tiles(scalar @tile_names);
  }
  my $x = 0;
  my $y = 0;
  foreach my $tile (@tile_names) {
    my $a = exists $self->_tiles->{$tile}->{'F'} ? $self->_tiles->{$tile}->{'F'} : $self->_tiles->{$tile}->{'R'};
    if (defined $a && @{$a}) {
      my $tx = scalar @{$a};
      if ($x < $tx) {
        $x = $tx;
      }
      foreach my $v (@{$a}) {
        if (defined $v && @{$v}) {
          my $ty = scalar @{$v};
          if ($y < $ty) {
            $y = $ty;
          }
	}
      }
    }
  }

  $self->_tile_image_width($x);
  $self->_tile_image_height($y);

  return $count;
}

sub _coord {
  my ($self, $x, $read_name) = @_;

  $x -= $COORD_SHIFT;
  if ($x < 0) {
    croak 'Negative coordinate after shifting; readname ' . $read_name;
  }
  $x /= $COORD_FACTOR;
  return $self->_coord_old($x);
}

sub _coord_old {
  my ($self, $x) = @_;
  return int($x / $self->reduction);
}

sub _bin_read { ##no critic (Subroutines::ProhibitManyArgs)
  my ($self, $tile, $x, $y, $read, $columns) = @_;

  my $num_cycles   = $self->_num_cycles;
  $self->_tiles->{$tile}->{$read}->[$x]->[$y]->[0]++;
  my $data = $self->_compute($columns);
  my $i = 0;
  while( $i < $num_cycles) {
    my $j = 0;
    while ($j < $self->_num_image_types) {
      $self->_tiles->{$tile}->{$read}->[$x]->[$y]->[$j+1]->[$i] += $data->[$j]->[$i];
      $j++;
    }
    $i++;
  }
  return;
}

sub _compute {
  my ($self, $columns) = @_;

  my @data = ();
  my $char_shift = $CHAR_SHIFT;
  ##no critic (ProhibitParensWithBuiltins BuiltinFunctions::ProhibitStringySplit)
  foreach my $type (@{$self->type}) {
    my @temp;
    if ($type eq q[qual] || $type eq q[oqual] ) {
      my $index = $type eq q[qual] ? $QUALITIES_INDEX : $OQUALITIES_INDEX;
      @temp = map {ord($_) - $char_shift} split(q(), $columns->[$index]);
    } else {
      my $key = $MMATCH_BITMAP_KEYS{$type};
      @temp = map {((ord($_) - $char_shift) & $key) ? 1 : 0  } split(q(),$columns->[$MMATCH_BITMAP_INDEX]);
    }
    push @data, \@temp;
  }

  if ($self->min_qual && defined $self->_max_nonqual_index && $self->_qual_index) { # no filtering if quality is not needed or nothing but the quality types is asked for
    $self->_filter_by_quality(\@data);
  }
  return \@data;
}

sub _filter_by_quality {
  my ($self, $data) = @_;

  my $qual_index = $self->_qual_index;
  my $max_index  = $self->_max_nonqual_index;
  my $num_cycles = $self->_num_cycles - 1;
  my $min_qual   = $self->min_qual;
  foreach my $cycle (0 .. $num_cycles) {
    if ($data->[$qual_index]->[$cycle] < $min_qual) {
      foreach my $i ( 0 .. $max_index) {
        $data->[$i]->[$cycle] = 0;
      }
    }
  }
  return;
}

sub _draw { ##no critic (Subroutines::ProhibitExcessComplexity)
  my ($self) = @_;

  my @directions = $self->_directions;
  my @cycles = @{$self->cycles} ? @{$self->cycles} : (1 .. $self->_num_cycles);
  unshift @cycles, 0;

  my $image_width  = $self->_tile_image_width;
  my $image_height = $self->_tile_image_height;
  my $ntiles = scalar keys %{$self->_tiles};
  ##no critic (InputOutput::RequireCheckedSyscalls)
  print "FOUND $ntiles TILES\n";
  print "TILE IMAGE WIDTH:HEIGHT $image_width : $image_height\n";
  ##use critic

  ##no critic (RegularExpressions::RequireLineBoundaryMatching RegularExpressions::RequireExtendedFormatting RegularExpressions::RequireDotMatchAnything)
  my $tile_name_pattern = qr/(\d)(\d)(\d\d)/;
  ##use critic
  my @types = @{$self->type};
  unshift @types, q[coverage];

  my $max_digits = length $self->_num_cycles;
  ##no critic (ControlStructures::ProhibitDeepNests)
  foreach my $image_type (@types) {
      foreach my $cycle (@cycles) {

	if ($cycle > 0 && $image_type eq q[coverage]) { last; }

	my $icycle = $cycle == 0 ? undef : $cycle-1;
	my $method = '_colour_' . $image_type;
	my $images = {};

	foreach my $direction (@directions) {
	  $images->{$direction} = $self->_image_init();
	}

	foreach my $tile (keys %{$self->_tiles}) {
	  my ($surface, $column, $row) = $tile =~ /$tile_name_pattern/smx;
	  if (!$surface) { # old style tile name and layout
	    $row = $tile;
	    $column = 1;
	    $surface = 1;
	  }
	  my $x_offset = ($column - 1) * $image_width;
	  if ($surface == 2) {
	    $x_offset += $image_width * $self->_num_columns + $IMAGE_GAP;
	  }
	  my $y_offset = ($row - 1) * ($image_height + 1) + $LABEL_HEIGHT;

	  foreach my $direction (@directions) {
	    if (exists $self->_tiles->{$tile}->{$direction}) {
	      my $x = 0;
	      while ($x < $image_width) {
		my $y = 0;
		while ($y < $image_height) {
		  my $colour = $self->$method($direction,$self->_tiles->{$tile}->{$direction}->[$x]->[$y], $icycle);
		  if ($colour) {
		    $images->{$direction}->setPixel($x+$x_offset,$y+$y_offset,$colour);
		  }
		  $y++;
		}
		$x++;
	      }
	    }
	  }
	}

	foreach my $read (@directions) {
          my $cycle_string = $cycle;
          ##no critic (ProhibitParensWithBuiltins)
          my $diff = $max_digits - length($cycle_string);
          ##use critic
          ##no critic (ControlStructures::ProhibitCStyleForLoops)
          for (my $i = 0; $i < $diff; $i++) {
            $cycle_string = '0' . $cycle_string;
	  }
          ##use critic

	  my $fname = $cycle == 0 ? $read : $cycle_string . $read;
          ##no critic (ValuesAndExpressions::ProhibitMagicNumbers)
	  my $type = substr $image_type, 0, 3;
          ##use critic
	  $fname .= "_$type";
	  my $im = $images->{$read};
	  $self->_set_image_label($im, $fname);
	  $fname = join q[_], $self->_sequence_id, $fname;
	  if ($cycle == 0) {
	    push @{$self->_summary_images}, $fname;
	  } else {
            $self->_per_cycle_images->{$read}->{$cycle}->{$image_type} =  $fname;
	  }
	  $self->_image_write($im, $fname);
	}
      }
  }

  return;
}

sub _directions {
  my $self = shift;
  my @directions = ();
  foreach my $tile (keys %{$self->_tiles}) {
    push @directions, keys %{$self->_tiles->{$tile}};
  }
  @directions = uniq @directions;
  @directions = sort @directions;
  return @directions;
}

sub _colour_coverage {
  my ($self, $direction, $r) = @_;
  my $colour;
  my $v = $r->[0];
  if ($v) {
    ##no critic (ValuesAndExpressions::ProhibitMagicNumbers)
    if ($v > 11) {$v = 11;}
    ##use critic
    $colour = $self->_colour_table->{$v};
  }
  return $colour;
}

sub _colour_del {
  my ($self, $direction, $r, $cycle,) = @_;
  return $self->_colour_mmatch($direction, $r, $cycle, $self->_type_index('del'));
}

sub _drop_firstlast_cycles {
  my ($self, $direction, $values) = @_;

  my @temp = @{$values};
  pop @temp; # do not use the last cycle quality
  if ($direction eq 'R' && scalar(@temp) > 2) {
    shift @temp;  # do not use the first cycle in reverse read
  }
  return @temp;
}

sub _colour_insert {
  my ($self, $direction, $r, $cycle) = @_;
  return $self->_colour_mmatch($direction, $r, $cycle, $self->_type_index('insert'));
}

sub _colour_qual {
  my ($self, $direction, $r, $cycle, $type) = @_;

  $type ||= 'qual';
  my $type_index ||= $self->_type_index($type);
  my $total = $r->[0];
  my $colour;
  if ($total) {
    my $v;
    if (defined $cycle) {
      $v = $r->[$type_index]->[$cycle];
    } else {
      # take min quality of the remaining cycles
      $v = min $self->_drop_firstlast_cycles($direction, $r->[$type_index]);
    }
    my $av_quality = $v / $total;
    $colour = $self->_colour_table->{'low'};
    ##no critic (ValuesAndExpressions::ProhibitMagicNumbers)
    if ($av_quality > 30) {
      $colour = $self->_colour_table->{'high'};
    } elsif ($av_quality > 15) {
      $colour = $self->_colour_table->{'medium'};
    } elsif ($av_quality < 5) {
      $colour = $self->_colour_table->{'zero'};
    }
  }
  return $colour;
}

sub _colour_oqual {
  my ($self, $direction, $r, $cycle) = @_;
  return $self->_colour_qual($direction, $r, $cycle, 'oqual');
}

sub _colour_mmatch {
  my ($self, $direction, $r, $cycle, $type_index) = @_;

  if (!defined $type_index) {
    $type_index = $self->_type_index('mmatch')
  }

  my $total = $r->[0];

  my $colour;
  if ($total) {
    $colour = $self->_colour_table->{'no_mmatch'};
    my $v = defined $cycle ? $r->[$type_index]->[$cycle] : max $self->_drop_firstlast_cycles($direction, $r->[$type_index]);
    if ($v) {
      {
        use integer;
        ##no critic (ValuesAndExpressions::ProhibitMagicNumbers)
        $colour = $self->_colour_table->{($v * 10)/$total + 1};
      }
    }
  }
  return $colour;
}

sub _type_index {
  my ($self, $type) = @_;
  my $i = 1;
  foreach my $itype (@{$self->type}) {
    if ($type eq $itype) {
      last;
    }
    $i++;
  }
  if ($i > $self->_num_image_types) {
    croak "Unknown image type $type";
  }
  return $i;
}

sub _image_init {
  my $self = shift;
  my $im = GD::Image->new($self->_image_width, $self->_image_height);
  if (!$im) {
    croak q[Failed to create an image object];
  }

  my $black = $im->colorAllocate(0,0,0); #background colour
  my $colour_table = {};
  ##no critic (ProhibitMagicNumbers)
  $colour_table->{'text'} = $im->colorAllocate(239, 239, 239); # light grey
  $colour_table->{'no_mmatch'} = $im->colorAllocate(255, 255, 255); # white
  $colour_table->{'zero'} = $im->colorAllocate(255, 0, 0); # red
  $colour_table->{'medium'} = $im->colorAllocate(21, 58, 144); # dark blue
  $colour_table->{'low'} = $im->colorAllocate(244, 211, 71); # yellow
  $colour_table->{'high'} = $im->colorAllocate(185, 212, 246);  # light blue

  $colour_table->{1}  = $im->colorAllocate(211,222,235);
  $colour_table->{2}  = $im->colorAllocate(189,206,225);
  $colour_table->{3}  = $im->colorAllocate(167,190,215);
  $colour_table->{4}  = $im->colorAllocate(145,174,205);
  $colour_table->{5}  = $im->colorAllocate(124,157,195);
  $colour_table->{6}  = $im->colorAllocate(102,141,185);
  $colour_table->{7}  = $im->colorAllocate(80,125,175);
  $colour_table->{8}  = $im->colorAllocate(58,109,165);
  $colour_table->{9} = $im->colorAllocate(36,93,155);
  $colour_table->{10} = $im->colorAllocate(15,77,146);
  $colour_table->{11} = $im->colorAllocate(0,61,136);
  ##use critic
  if (!$self->_colour_table) {
    $self->_colour_table($colour_table);
  }
  return $im;
}

sub _set_image_label {
  my ($self, $im, $fname) = @_;

  my $colour = $self->_colour_table->{'text'};
  ##no critic (ProhibitMagicNumbers)
  $im->string(GD::gdSmallFont, 3, 1, $self->_sequence_id, $colour);
  $im->string(GD::gdSmallFont, 3, 11, $fname, $colour);
  return;
}

sub _image_write {
  my ($self, $im, $fname) = @_;

  $fname = join q[/], $self->_image_dir, "$fname.png";
  open my $fh, '>', $fname || croak "Cannot open file $fname for writing";
  binmode $fh;
  print {$fh} $im->png or croak 'Cannot print png image';
  close $fh or carp "Cannot close a file handle for image $fname";
  return;
}

sub _report { ##no critic (Subroutines::ProhibitExcessComplexity)
  my $self = shift;

  my $fname = join q[/], $self->dir_out, $self->_image_dir_name . '.html';
  my $title = 'Tile Visualisation for ' . $self->_sequence_id;
  if ($self->min_qual) {
    $title .= ', ';
    if ($self->use_oq) {
      $title .= 'original ';
    }
    $title .= 'quality threshold ' . $self->min_qual;
  }
  my @image_types = @{$self->type};
  my $image_dir_name = $self->_image_dir_name . q[/];
  $image_dir_name =~ s/#/%23/;

  ##no critic (InputOutput::RequireBriefOpen)
  open my $fh, '>', $fname or croak "Cannot write to $fname";

  print {$fh} '<html>' . "\n" or croak "Cannot write to $fname";
  print {$fh} '<head>' . "\n" or croak "Cannot write to $fname";
  print {$fh} '  <title>'. $title . '</title>' . "\n" or croak "Cannot write to $fname";
  print {$fh} '  <style type="text/css">' . "\n" or croak "Cannot write to $fname";
  print {$fh} '    table {background-color: rgb(200,200,200)}' . "\n" or croak "Cannot write to $fname";
  print {$fh} '    td {padding: 3px;}' . "\n" or croak "Cannot write to $fname";
  print {$fh} '  </style>' . "\n" or croak "Cannot write to $fname";
  print {$fh} '</head>' . "\n" or croak "Cannot write to $fname";
  print {$fh} '<body>' . "\n" or croak "Cannot write to $fname";

  print {$fh} '  <h3>' . $title . '</h3>' . "\n" or croak "Cannot write to $fname";
  print {$fh} '  <h4>Summary</h4>' . "\n" or croak "Cannot write to $fname";
  print {$fh} '  <table>' . "\n" or croak "Cannot write to $fname";
  print {$fh} '    <tr>' . "\n" or croak "Cannot write to $fname";
  #foreach my  $im (sort @{$self->_summary_images}) {
  foreach my  $im (@{$self->_summary_images}) {
    print {$fh} '<td><img src="' . $image_dir_name.$im  . '.png" /></td>' . "\n" or croak "Cannot write to $fname";
  }
  print {$fh} '    </tr>' . "\n" or croak "Cannot write to $fname";
  print {$fh} '  </table>' . "\n" or croak "Cannot write to $fname";

  my $num_types = scalar @image_types;
  my $overflow =  $NUM_IMAGES_IN_REPORT_ROW % $num_types;
  my $num_columns = $NUM_IMAGES_IN_REPORT_ROW;
  if ($overflow) {
    $num_columns += $num_types - $overflow;
  }

  foreach my $direction (sort keys %{ $self->_per_cycle_images}) {
    my $d = $direction eq 'F' ? 'Forward' : 'Reverse';
    print {$fh} '  <h4>' . $d . ' Read per Cycle</h4>' . "\n" or croak "Cannot write to $fname";
    print {$fh} '  <table>' . "\n" or croak "Cannot write to $fname";

      my @images = ();
      foreach my $cycle (sort { $a <=> $b } keys %{$self->_per_cycle_images->{$direction}}) {
        foreach my $itype (@image_types) {
	  push @images, $self->_per_cycle_images->{$direction}->{$cycle}->{$itype};
	}
      }
      my $num_images = scalar @images;

      my $num_rows = int($num_images / $num_columns);
      if ($num_images % $num_columns) {
	$num_rows++;
      }
      my $ir = 0;
      while( $ir < $num_rows) {
	print {$fh} '    <tr>' . "\n" or croak "Cannot write to $fname";
	my $ic = 0;
	while( $ic < $num_columns) {
	  my $im = @images ? shift @images : undef;
	  my $str = $im ? '<img src="' . $image_dir_name.$im . '.png" />' : '&nbsp';
          my $td = ($ic + 1) % $num_types ? '<td>' : '<td  style="padding-right:10px;">';
	  print {$fh} $td . $str  . '</td>' . "\n" or croak "Cannot write to $fname";
	  $ic++;
	}
	print {$fh} '    </tr>' . "\n" or croak "Cannot write to $fname";
	$ir++;
      }
      print {$fh} '  </table>' . "\n" or croak "Cannot write to $fname";
  }

  print {$fh} '</body>' . "\n" or croak "Cannot write to $fname";
  print {$fh} '</html>' . "\n" or croak "Cannot write to $fname";
  close $fh or carp "Cannot close filehandle to $fname";
  return;
}

no Moose;
1;

package main;

use strict;
use warnings;

our $VERSION = do { my ($r) = q$Revision: 15816 $ =~ /(\d+)/smx; $r; };

npg_qc::tileviz->new_with_options()->run();

exit 0;

__END__

=head1 NAME

tileviz

=head1 VERSION

$Revision: 15816 $

=head1 SYNOPSIS

=head1 DESCRIPTION

Tile visualization

=head1 USAGE

=head1 REQUIRED ARGUMENTS

=head1 OPTIONS

=head1 EXIT STATUS

=head1 SUBROUTINES/METHODS

=head2 new - constructor

=head2 run - runs parser, loads all data into memory and renders from memory

=head2 type

  array ref of types of image (insert, del, qual, mmatch); default - insert, qual, mmatch; oqual is added automatically if available

=head2 dir_out

  output directory, default - current directory

=head2 cycles

  array of cycle numbers; if not set, all cycles will be considered

=head2 bam_in

  full path to a bam file, including its name; required

=head2 snp_file

  full path to a file of known SNPs, including its name; optional argument, no default

=head2 jump_by

  jump size if any records have to be skipped, 1 by default, ie no skipping

=head2 reduction

  linear scaling down of both x and y coordinates, default - 200, meaning in practice 2000

=head2 mismatch_tool_path

  path to a tool that interprets bam file, optional argument

=head2 min_qual

  minimum quality to consider for indels and mismatches, zero by default

=head2 use_oq

  a boolean flag indicating whether to use original qualities when filtering by quality; false by default

=head2 num_tiles

  number of tiles to identify the layout of tiles; if not given, it is computed from the data

=head1 DIAGNOSTICS

=head1 CONFIGURATION

=head1 DEPENDENCIES

strict
warnings
English qw(-no_match_vars)
Carp
Readonly
Moose
MooseX::Getopt
Cwd
GD::Image
List::Util qw/max min/
List::MoreUtils qw/uniq/

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

$Author: mg8 $

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2012 Marina Gourtovaia (mg8@sanger.ac.uk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
