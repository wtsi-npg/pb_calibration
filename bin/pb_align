#!/bin/bash

#########################################################################
#
# run pb_align
#
# for usage run
#
#   pb_align -h
#
#########################################################################

initialise ()
{

    # set defaults
    bam=""
    read=""
    read1=""
    read2=""
    pf_filter=""
    ref=""
    prefix=""
    aln_parms=""
    sam_parms=""
    spatial_filter=""
    intensity_dir=""
    sf_parms=""
    bam_join_jar="/software/solexa/bin/aligners/illumina2bam/current/BamMerger.jar"

    TEMP=`getopt -a -o h --long bam:,read:,read1:,read2:,pf_filter,ref:,aln_parms:,sam_parms:,spatial_filter,intensity_dir:,sf_parms:,bam_join_jar:,prefix:,help -n $0 -- "$@"`

    if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            --bam) bam=$2; echo "input bam file $bam" >&2; shift 2 ;;
            --read) read=$2; echo "read $read" >&2; shift 2 ;;
            --read1) read1=$2; echo "read1 $read1" >&2; shift 2 ;;
            --read2) read2=$2; echo "read2 $read2" >&2; shift 2 ;;
            --pf_filter) pf_filter=1; echo "will purity filter" >&2; shift 1 ;;
            --ref) ref=$2; echo "reference $ref" >&2; shift 2 ;;
            --aln_parms) aln_parms=$2; echo "aln_parms options $aln_parms" >&2; shift 2 ;;
            --sam_parms) sam_parms=$2; echo "sam_parms options $sam_parms" >&2; shift 2 ;;
 	    --spatial_filter) spatial_filter=1; echo "will apply spatial_filter" >&2; shift 1 ;;
            --intensity_dir) intensity_dir=$2; echo "DEPRECATED intensity_dir $intensity_dir DEPRECATED" >&2; shift 2 ;;
	    --sf_parms) sf_parms=$2; echo "sf_parms options $sf_parms" >&2; shift 2 ;;
	    --bam_join_jar) bam_join_jar=$2; echo "bam_join_jar $bam_join_jar" >&2; shift 2 ;;
            --prefix) prefix=$2; echo "prefix $prefix" >&2; shift 2 ;;
            -h|--help) echo "Usage: $0 [options]";
                       echo "                   ";
                       echo "       --bam <bam file>";
                       echo "                   ";
                       echo "       --read <read>        0-single-ended read in bam file, 1-first read in bam file, 2-second read in bam file";
                       echo "                             single read, no default";
                       echo "       --read1 <read1>      1-first read in bam file, 2-second read in bam file";
                       echo "       --read2 <read2>      1-first read in bam file, 2-second read in bam file";
                       echo "                             paired reads, no default";
                       echo "                   ";
                       echo "       --pf_filter          purity filter reads";
                       echo "                             default do not purity filter reads";
                       echo "                   ";
                       echo "                   ";
                       echo "       --ref <ref>          full path to reference";
                       echo "                   ";
                       echo "       --aln_parms <bwa aln parameters>";
                       echo "                             no default";
                       echo "                   ";
                       echo "       --sam_parms <bwa sam{se,pe} parameters>";
                       echo "                             no default";
                       echo "                   ";
                       echo "                   ";
                       echo "       --spatial_filter     apply spatial filtering to the bam files";
                       echo "                   ";
                       echo "       --intensity_dir <raw intensity directory>";
                       echo "                             deprecated, no longer used";
                       echo "                   ";
                       echo "       --sf_parms <spatial_filter parameters>";
                       echo "                             no default";
                       echo "                   ";
                       echo "       --bam_join_jar <bam join jar inc. full path>";
                       echo "                   ";
                       echo "       --prefix <prefix>    output file prefix";
                       echo "                             no default";
                       echo "                   ";
                       echo "       -h|--help   ";
                       echo "                   ";
                       exit 0 ;;
            --) shift ; break ;;
            *) echo "Unrecognised option $1" >&2; exit 1 ;;
        esac
    done

    if [ -z $bam ] ; then
        echo "You must supply a bam file" >&2
        exit 1
    fi

    if [ -z $read ] && ( [ -z $read1 ] || [ -z $read2 ] ) ; then
        echo "You must specify read or read1+read2" >&2
        exit 1
    fi

    if [ $read ] && ( [ $read1 ] || [ $read2 ] ) ; then
        echo "You must specify read OR read1+read2 not both" >&2
        exit 1
    fi

    if [ -z $ref ] ; then
        echo "You must specify a reference" >&2
        exit 1
    fi

    if [ -z $prefix ] ; then
        echo "You must supply a prefix" >&2
        exit 1
    fi

    if [ ! -r $bam_join_jar ] ; then
        echo "Cannot read bam join jar $bam_join_jar" >&2
        exit 1
    fi
}

set -o errexit
set -o nounset

initialise "$@"

tools=$(dirname $0)
tools=$(readlink -e $tools)
bwa=$(which bwa)
bwa=$(readlink -e $bwa)
bam_join_jar=$(readlink -e $bam_join_jar)

if [ -z $ref ] ; then
  echo "You must specify the full path to the reference" >&2
  exit 1
fi

echo "Output file prefix ${prefix}" >&2

if [ ! -s $bam ] ; then
    echo "input bam file $bam does not exist" >&2
    exit 1
fi

output=${prefix}.bam
echo "Making bam file $output" >&2

if [ $read ] ; then
  picard_parms="VALIDATION_STRINGENCY=SILENT QUIET=true INPUT=$bam ALIGNED=/dev/stdin OUTPUT=$output"
else
  picard_parms="VALIDATION_STRINGENCY=SILENT QUIET=true INPUT=$bam ALIGNED=/dev/stdin COMPRESSION_LEVEL=0 OUTPUT=/dev/stdout"
fi

if [ $pf_filter ] ; then
  filter=512
else
  filter=0
fi

if [ $read ] ; then
    sai=${prefix}.sai
    bwa aln $aln_parms $ref -b${read} $bam > $sai

    bwa samse $sam_parms $ref $sai $bam \
     | perl -aF'\t' -ne 'BEGIN{$filter=int(shift)} print unless ($F[1] & $filter || $F[1] & 4)' $filter \
     | java -Xmx1024M -jar $bam_join_jar $picard_parms
else
    sai1=${prefix}_1.sai
    bwa aln $aln_parms $ref -b1 $bam > $sai1

    sai2=${prefix}_2.sai
    bwa aln $aln_parms $ref -b2 $bam > $sai2

    bwa sampe $sam_parms $ref $sai1 $sai2 $bam $bam \
     | perl -aF'\t' -ne 'BEGIN{$filter=int(shift)} print unless ($F[1] & $filter || ($F[1] & 4 && $F[1] & 8))' $filter \
     | java -Xmx1024M -jar $bam_join_jar $picard_parms | samtools fixmate - $output
fi

if [ ! -s $output ] ; then
    echo "failed to create output file $output" >&2
    exit 1
fi

stat_file=${prefix}_flagstat.txt
samtools flagstat $output > $stat_file
if [ ! -s $stat_file ] ; then
    echo "failed to create flagstat file" >&2
    exit 1
fi

pair=`awk '/[0-9]+ paired in sequencing/ {print $1+$3}' $stat_file`
if [ $pair -gt 0 ] ; then
    count=`awk '/[0-9]+ properly paired/ {print $1}' $stat_file`
    if [ $count -lt 200000 ] ; then
        echo "Only $count properly paired reads < 200000" >&2
        exit 0
    fi
else
    count=`awk '/[0-9]+ mapped/ {print $1}' $stat_file`
    if [ $count -lt 100000 ] ; then
        echo "Only $count reads align < 100000" >&2
        exit 0
    fi
fi

echo "Making spatial filter..." >&2

#
# Spatial Filter options
# Added 8 Oct 2012 by js10
#
if [ $spatial_filter ] ; then
	$tools/spatial_filter -c $sf_parms --filter ${output}.filter $output
	if [ ! -s ${output}.filter ] ; then
		echo "spatial_filter failed to create a filter file ${output}.filter" >&2
		exit 1
	fi
	filtered_bam=$(echo ${output} | sed -r 's/([^/]+)$/filtered_\1/')
	$tools/spatial_filter -a --filter ${output}.filter -o $filtered_bam $output
	if [ ! -s $filtered_bam ] ; then
		echo "spatial_filter failed to apply filter and produce $filtered_bam" >&2
		exit 1
	fi
	mv $output $(echo ${output} | sed -r 's/([^/]+)$/original_\1/')
	mv $filtered_bam $output
fi

stat_file=${prefix}_flagstat.txt
samtools flagstat $output > $stat_file
if [ ! -s $stat_file ] ; then
    echo "failed to create flagstat file" >&2
    exit 1
fi

